uji$expected
uji$residuals
m <- rbind(c(10, 70),
c(60, 20))
dimnames(m) <- list(JK = c("L", "P"),
Hukuman_Mati = c("Setuju", "Tidak"))
uji <- chisq.test(m)
uji
uji$observed
uji$expected
uji$residuals
model <- lm(y ~ x)
summary(model)
# No 4
x <- c(1, 2, 4, 6, 7)
y <- c(6, 10, 14, 16, 20)
model <- lm(y ~ x)
summary(model)
Jarak <- c(31, 38, 48, 52, 63, 67, 75, 84, 89, 99)
Emisi <- c(553, 590, 608, 682, 752, 725, 834, 752, 845,	960)
model <- lm(Emisi ~ Jarak)
summary(model)
m <- rbind(c(10, 70),
c(60, 20))
dimnames(m) <- list(JK = c("L", "P"),
Hukuman_Mati = c("Setuju", "Tidak"))
uji <- chisq.test(m)
uji
summary(uji)
uji$statistic
uji$parameter
# No 4
x <- c(1, 2, 4, 6, 7)
y <- c(6, 10, 14, 16, 20)
model <- lm(y ~ x)
summary(model)
Jarak <- c(31, 38, 48, 52, 63, 67, 75, 84, 89, 99)
Emisi <- c(553, 590, 608, 682, 752, 725, 834, 752, 845,	960)
model <- lm(Emisi ~ Jarak)
summary(model)
# No 1
prop.test(1200, 2000, p = 0.5, alternative = "greater")  # A1
prop.test(600, 1000, p = 0.5, alternative = "greater")
# No 2
tsum.test(mean.x = 55, s.x = sqrt(4.2), n.x = 25,
alternative = "greater", mu = 50, conf.level = 0.95)
library(BSDA)
# No 2
tsum.test(mean.x = 55, s.x = sqrt(4.2), n.x = 25,
alternative = "greater", mu = 50, conf.level = 0.95)
# No 4
x <- c(1, 2, 4, 6, 7)
y <- c(6, 10, 14, 16, 20)
model <- lm(y ~ x)
summary(model)
# No 3
tsum.test(mean.x = 40, s.x = 6, n.x = 15,
mean.y = 50, s.y = 10.2, n.y = 10,
alternative = "less",
conf.level = 0.95, var.equal = T) #A1
tsum.test(mean.x = 40, s.x = 6, n.x = 15,
mean.y = 50, s.y = 10.2, n.y = 10,
alternative = "two.sided",
conf.level = 0.95, var.equal = T) #A2
tsum.test(mean.x = 55, s.x = sqrt(4.2), n.x = 25,
alternative = "less", mu = 50, conf.level = 0.95) #A2
tsum.test(mean.x = 55, s.x = sqrt(4.2), n.x = 25,
alternative = "less", mu = 50, conf.level = 0.95) #A2
tsum.test(mean.x = 40, s.x = 6, n.x = 15,
mean.y = 50, s.y = 10.2, n.y = 10,
alternative = "two.sided",
conf.level = 0.95, var.equal = T) #A2
# No 3
tsum.test(mean.x = 40, s.x = 6, n.x = 15,
mean.y = 50, s.y = 10.2, n.y = 10,
alternative = "less",
conf.level = 0.95, var.equal = T) #A1
tsum.test(mean.x = 40, s.x = 6, n.x = 15,
mean.y = 50, s.y = 10.2, n.y = 10,
alternative = "two.sided",
conf.level = 0.95, var.equal = T) #A2
tsum.test(mean.x = 40, s.x = 6, n.x = 15,
mean.y = 50, s.y = 10.2, n.y = 10,
alternative = "two.sided",
conf.level = 0.95, var.equal = T) #A2
?lm
model <- lm(y ~ x)
summary(model)
anova(model)
iris
Lama_Studi <- c(14, 25, 15,	5, 10, 12, 5, 21)
IPK <- c(2.8,	3.6, 3.4,	3, 3.1,	3.3, 2.7,	3.8)
model <- lm(IPK ~ Lama_Studi)
summary(model)
Lama_Studi <- c(14, 25, 15,	5, 10, 12, 5, 21)
IPK <- c(2.8,	3.6, 3.4,	3, 3.1,	3.3, 2.7,	3.8)
model <- lm(IPK ~ Lama_Studi)
summary(model)
anova(model)
0.67454/0.05903
Hershey()
colors()
hcl.colors()
hcl()
demo(hcl)
demo(graphics)
demo(base)
demo(glm.vr)
library(quantmod)
getSymbols("UNVR", from = '2022-01-01',
to = "2022-10-31",warnings = FALSE,
auto.assign = TRUE)
head(UNVR)
x_bar <- 15
sd <- 10
z <- (50-x_bar)/sd
pnorm(50,mean = 15, sd = 10, lower.tail = F)
pnorm(z)
curve(x^2 + y^2, -100,100)
curve(x^2, -100,100)
curve(x^2, -10,100)
curve(x^2, -10,10)
curve(x^2, -10,10)
curve(sin(x), -10,10)
curve(cos(x), -10,10)
curve(tan(x), -10,10)
curve(1/x, 0,10)
curve(1/x, -10, 10)
curve(1/x, -10, 10)
?curve
curve(1/x, -10, 10)
curve(^2, -10, 10, add = TRUE)
curve(1/x, -10, 10)
curve(x^2, -10, 10, add = TRUE)
curve(-x^2, -10, 10, add = TRUE)
?curve
data(mtcars)
x <- mtcars[, c("cyl", "gear", "carb", "hp")]
item_reliability(x)
install.packages("performance")
library(performance)
data(mtcars)
x <- mtcars[, c("cyl", "gear", "carb", "hp")]
item_reliability(x)
data(mtcars)
x <- mtcars[, c("cyl", "gear", "carb", "hp")]
cronbachs_alpha(x)
install.packages("gptstudio")
require(devtools)
install.packages("devtools", dependencies = Y)
install.packages("devtools", dependencies = T)
require(devtools)
install_github("MichelNivard/gptstudio")
library(fastmap)
install.packages(c("blavaan", "cachem", "dbplyr", "dtplyr", "fastmap", "flextable", "forecast", "Formula", "haven", "httr", "igraph", "lava", "packrat", "posterior", "RcppArmadillo", "RcppParallel", "recipes", "tidyverse", "xts"))
update.packages(ask = F, checkBuilt = T)
install_github("MichelNivard/gptstudio")
require(devtools)
install_github("MichelNivard/gptstudio")
install_github("MichelNivard/gptstudio", force = TRUE)
gptstudio:::chat_gpt_addin()
Sys.setenv(OPENAI_API_KEY = "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")
gptstudio:::chat_gpt_addin()
Sys.setenv(OPENAI_API_KEY = "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")
#!/usr/bin/env python
# -*- coding: utf-8 -*-
import re
curve(-x^2 + 5, -10, 10, add = TRUE, col = "pink", lwd = 4)
curve(-x^2 + x, -10, 10, add = TRUE)
curve(-x^2 + 5, -10, 10, add = TRUE, col = "pink", lwd = 4)
curve(x^2, -10, 10, add = TRUE)
update.packages(ask = F, checkBuilt = T)
t.test(iris$Sepal.Length, mu = 12, alternative = "greater")
t.test(iris$Sepal.Length, mu = 4, alternative = "greater")
t.test(iris$Sepal.Length, mu = 5, alternative = "greater")
t.test(iris$Sepal.Length, mu = 5.7, alternative = "greater")
t.test(iris$Sepal.Length, mu = 5.8, alternative = "greater")
curve(x, from = 1, to = 10)
?curve
curve(rnorm)
curve(dnorm)
curve(t)
?t
dt
curve(dt)
curve(dt(23,5))
?dt
ikan <- c("salmon", "Teri", "Tuna")
sayur <- c("Brokoli", "Letuce", "Bayam")
yoghurt <- c("plain", "apple", "orange")
ls(list = "y")
ls(pat = "y")
ikan <- c("salmon", "Teri", "Tuna")
sayur <- c("Brokoli", "Letuce", "Bayam")
yoghurt <- c("plain", "apple", "orange")
ls(pat = "y")
ikan <- c("salmon", "Teri", "Tuna")
sayur <- c("Brokoli", "Letuce", "Bayam")
yoghurt <- c("plain", "apple", "orange")
ls(pat = "y")
1 - pt(1:5, df = 1)
qt(.975, df = c(1:10,20,50,100,1000))
tt <- seq(0, 10, length.out = 21)
ncp <- seq(0, 6, length.out = 31)
ptn <- outer(tt, ncp, function(t, d) pt(t, df = 3, ncp = d))
t.tit <- "Non-central t - Probabilities"
image(tt, ncp, ptn, zlim = c(0,1), main = t.tit)
persp(tt, ncp, ptn, zlim = 0:1, r = 2, phi = 20, theta = 200, main = t.tit,
xlab = "t", ylab = "non-centrality parameter",
zlab = "Pr(T <= t)")
plot(function(x) dt(x, df = 3, ncp = 2), -3, 11, ylim = c(0, 0.32),
main = "Non-central t - Density", yaxs = "i")
install.packages("insatllr")
install.packages("installr")
library(installr)
installr::get_latest_r_version()
library(installr)
?updateR
updateR()
Sys.info()
update.packages(ask = F, checkBuilt = T)
update.packages(ask=F, checkBuilt = T)
update.packages(ask = F, checkBuilt = T)
library(flexdashboard)
Sys.setlocale("LC_TIME", "IND")
#library(flipTime)
#UpdateEvery(1, "hours", options = "wakeup")
library(readxl)
db <- read_excel("data.xlsx")
library(tidyverse)
data <- db %>%
group_by(prodi) %>%
summarize(minat = max(peminat))
data <- read_excel("G:/My Drive/#PMB/2023/03_SMM/23smm/Statistik_Keketatan_Prodi_smmptn_2023.xlsx")
data
data <- data[,-2]
names(data)
M <- 10000 #value big enough (change the number in order to suit your needs)
solutionChecking <- function(matrix, solution, costMatrix){
solutionAux <- solution
foundSolutions <- list()
flag_found = FALSE
counter = 0
previousDuplicate = -1
duplicate = anyDuplicated(solutionAux[seq(2, 2*nrow(matrix), by = 2)])
while(duplicate != 0){
for(j in 1:ncol(matrix)){
if(matrix[duplicate, j] == 0){
counter = counter + 1
}
if(matrix[duplicate, j] == 0 && j != solutionAux[2*duplicate]){
s<-solutionAux
s[2*duplicate] = j
flag_found = FALSE
for(p in foundSolutions){
paux <- as.vector(unlist(p))
if(all(s == paux) == TRUE){
flag_found = TRUE
break
}
}
if(flag_found == FALSE){
solutionAux <- s
foundSolutions[[length(foundSolutions)+1]] <- list(solutionAux)
break
}
}
}
if(anyDuplicated(solutionAux[seq(2, 2*nrow(matrix), by = 2)]) == 0){
break
}
if(counter == 1){
flag_found = TRUE
}
counter = 0
if(flag_found == TRUE){
for(i in 1:nrow(matrix)){
for(j in 1:ncol(matrix)){
if(matrix[i, j] == 0){
s<-solutionAux
s[2*(i-1)+1] <- i
s[2*(i-1)+2] <- j
flag_found = FALSE
for(p in foundSolutions){
paux<-as.vector(unlist(p))
if(all(s == paux) == TRUE){
flag_found = TRUE
break
}
}
if(flag_found == FALSE){
solutionAux <- s
break
}
}
}
if(flag_found == FALSE){
break
}
}
foundSolutions[[length(foundSolutions)+1]] <- list(solutionAux)
}
previousDuplicate = duplicate
duplicate = anyDuplicated(solutionAux[seq(2, 2*nrow(matrix), by = 2)])
if(previousDuplicate == duplicate){
duplicate <- which(duplicated(solutionAux[seq(2, 2*nrow(matrix), by = 2)], fromLast = TRUE)==TRUE)[1]
}
}
solutionValue = 0
for(k in 1:nrow(A)){
if(costMatrix[solutionAux[2*k-1],solutionAux[2*k]] != M){
solutionValue = solutionValue + costMatrix[solutionAux[2*k-1],solutionAux[2*k]]
}
}
return(list("solution" = solutionAux, "cost" = solutionValue))
}
assignmentSolver <- function(costMatrix){
A <- costMatrix
#Step 1: calculation fo reduced matrix
#the minimum of each row is calculated and they are subtracted
min = 10*M
for(i in 1:nrow(A)){
for(j in 1:ncol(A)){
if(A[i, j] < min){
min = A[i, j]
}
}
A[i,] <- A[i,]-min
min = 10*M
}
#the minimum of each column is calculated and they are subtracted
min = 10*M
for(j in 1:ncol(A)){
for(i in 1:nrow(A)){
if(A[i, j] < min){
min = A[i, j]
}
}
A[,j] <- A[,j]-min
min = 10*M
}
while(TRUE){
#Step 2: zero strikethrough cross out
assignedRows <- list()
assignedZeros <- list()
alreadyCrossout <- list()
for(i in 1:nrow(A)){
for(j in 1:ncol(A)){
if(A[i, j] == 0 && ((i-1)*ncol(A)+j) %in% alreadyCrossout == FALSE){
assignedZeros <- c(assignedZeros, ((i-1)*ncol(A)+j))
assignedRows <- c(assignedRows, i)
if((i+1) < nrow(A)){
for(k in (i+1):nrow(A)){
if(A[k, j] == 0  && ((k-1)*ncol(A)+j) %in% alreadyCrossout == FALSE){
alreadyCrossout<-c(alreadyCrossout, ((k-1)*ncol(A)+j))
}
}
}
break;
}
}
}
rowMarks <- list()
columnMarks <- list()
for(i in 1:nrow(A)){
if(i %in% assignedRows == FALSE){
rowMarks <- c(rowMarks, i)
}
}
for(i in rowMarks){
for(j in 1:ncol(A)){
if(A[i, j] == 0 && j %in% columnMarks == FALSE){
columnMarks <- c(columnMarks, j)
}
}
}
for(i in columnMarks){
for(j in 1:nrow(A)){
if(((j-1)*nrow(A)+i) %in% assignedZeros && j %in% rowMarks == FALSE){
rowMarks <- c(rowMarks, j)
}
}
}
rowLines <- list()
columnLines <- list()
columnLines <- columnMarks
for(i in 1:nrow(A)){
if(i %in% rowMarks == FALSE){
rowLines <- c(rowLines, i)
}
}
if(length(rowLines) + length(columnLines) == nrow(A)){
break;
}else{
#Step 3: reduced matrix is updated
min = M
for(i in 1:nrow(A)){
for(j in 1:ncol(A)){
if(A[i, j] < min && i %in% rowLines == FALSE && j %in% columnLines == FALSE){
min = A[i, j]
}
}
}
for(i in 1:nrow(A)){
for(j in 1:ncol(A)){
if(i %in% rowLines == FALSE && j %in% columnLines == FALSE){
A[i, j] <- A[i, j] - min
} else if(i %in% rowLines == TRUE && j %in% columnLines == TRUE){
A[i, j] <- A[i, j] + min
} else if(i %in% rowLines == TRUE && j %in% columnLines == FALSE){
A[i, j] <- A[i, j]
} else if(i %in% rowLines == FALSE && j %in% columnLines == TRUE){
A[i, j] <- A[i, j]
}
}
}
}
}
#Step 4: selection of the solution
solution <- c()
for(i in 1:nrow(A)){
for(j in 1:ncol(A)){
if(A[i, j] == 0){
solution <- c(solution, i, j)
break
}
}
}
list <- solutionChecking(A, solution, costMatrix)
return(list)
}
A<-matrix(nrow=5,ncol=5)
A[1,]<-c(-M, -M, 6, 4, 3)
A[2,]<-c(8, 6, 3, 7, 9)
A[3,]<-c(10, 10, 6, 9, 9)
A[4,]<-c(5, 5, 7, 2, 4)
A[5,]<-c(-M, -M, -M, -M, -M)
A<-A*(-1)
A
A<-matrix(nrow=5,ncol=5)
A[1,]<-c(4, 8, 8, 7, -M)
A[2,]<-c(9, 4, 8, 8, -M)
A[3,]<-c(4, 5, 4, 7, -M)
A[4,]<-c(6, 8, 10, 9, -M)
A[5,]<-c(8, 7, 5, 5, -M)
A<-A*(-1)
A
assignmentSolver(A)
A<-matrix(nrow=5,ncol=5)
A[1,]<-c(2,3,5,1,4)
A[2,]<-c(-1,1,3,6,2)
A[3,]<-c(-2,4,3,5,0)
A[4,]<-c(1,3,4,1,4)
A[5,]<-c(7,1,2,1,2)
A
assignmentSolver(A)
setwd("G:/My Drive/#PMB/2023/05_SMBNU/23smbnu")
library(readxl)
db <- read_excel("data.xlsx")
library(tidyverse)
library(tidyverse)
data <- db %>%
group_by(prodi) %>%
summarize(minat = max(peminat))
data
db
library(readxl)
db <- read_excel("data.xlsx")
dim(db)
data <- db %>%
group_by(prodi) %>%
summarize(minat = max(peminat))
data
sum(data$minat)
sum(data$minat)
library(plotly)
library(plotly)
library(shiny)
data <- db %>%
group_by(jk, fakultas) %>%
summarize(total = n(), .groups = "drop") %>%
pivot_wider(names_from = jk, values_from = total)
names(data) <- c("Fakultas", "Laki-Laki", "Perempuan")
data$Fakultas <- c("Hukum", "FKIP", "Teknik", "Pertanian", "FEB", "FISIP", "Kedokteran")
### agar sesuai urutan dibuat faktor dengan level yang berurutan
data$Fakultas <- factor(data$Fakultas, levels = data[["Fakultas"]])
div(plot_ly(data, x = ~Fakultas, y = ~`Laki-Laki`, type = 'bar', name = "Laki-Laki") %>%
add_trace(y = ~Perempuan, name = "Perempuan") %>%
layout(yaxis = list(title = ' '), barmode = 'group'), align = "center")
data <- read_excel("G:/My Drive/#PMB/2023/05_SMBNU/23smbnu/Statistik_Keketatan_Prodi_SMBNU_2023.xlsx")
data
data <- data[,-2]
names(data) <- c("No", "Program Studi", "Jenjang", "Peminat", "Diterima", "Keketatan (%)", "Peminat", "% Peminat", "Peminat", "% Peminat")
kable(data, row.names = F) %>%
kable_styling(bootstrap_options = "striped", full_width = F,
latex_options = "scale_down") %>%
add_header_above(c(" " = 6, "Pilihan 1" = 2, "Pilihan 2" = 2))
library(kableExtra)
kable(data, row.names = F) %>%
kable_styling(bootstrap_options = "striped", full_width = F,
latex_options = "scale_down") %>%
add_header_above(c(" " = 6, "Pilihan 1" = 2, "Pilihan 2" = 2))
setwd("G:/My Drive/#PMB/2023/05_SMBNU/23smbnu")
data <- db %>%
group_by(provinsi, jk) %>%
summarize(tot = n())
data
data <- db %>%
group_by(almt_prov, jk) %>%
summarize(tot = n())
data
setwd("G:/My Drive/#PMB/2023/03_SMM/23smm")
